#!/bin/sh

# br-public: 10.84.23.96 - 10.84.23.127
# br-mgmt: 10.1.1.0/24

public_mac_list="
    vm96=52:54:00:76:a5:2b
    vm97=52:54:00:52:19:86
    vm98=52:54:00:18:46:60
    vm99=52:54:00:84:b2:37
    vm100=52:54:00:36:97:e0
    vm101=52:54:00:91:28:72
    vm102=52:54:00:a7:84:6f
    vm103=52:54:00:c2:39:57
    vm104=52:54:00:77:a6:2c
    vm105=52:54:00:53:1a:87
    vm106=52:54:00:19:47:61
    vm107=52:54:00:85:b3:38
    vm108=52:54:00:37:98:e1
    vm109=52:54:00:92:29:73
    vm110=52:54:00:a8:85:70
    vm111=52:54:00:c3:3a:58"

mgmt_mac_list="
    vm96=52:54:00:76:a5:1b
    vm97=52:54:00:52:19:76
    vm98=52:54:00:18:46:50
    vm99=52:54:00:84:b2:27
    vm100=52:54:00:36:97:d0
    vm101=52:54:00:91:28:62
    vm102=52:54:00:a7:84:5f
    vm103=52:54:00:c2:39:47
    vm104=52:54:00:77:a6:1c
    vm105=52:54:00:53:1a:77
    vm106=52:54:00:19:47:51
    vm107=52:54:00:85:b3:28
    vm108=52:54:00:37:98:d1
    vm109=52:54:00:92:29:63
    vm110=52:54:00:a8:85:60
    vm111=52:54:00:c3:3a:48"

mac_get()
{
    for i in $mgmt_mac_list
    do
      mac_idx=`expr index $i =`
      if [ $1 == ${i:0:mac_idx-1} ]
      then
        mgmt_mac=${i:mac_idx}
      fi
    done

    for i in $public_mac_list
    do
      mac_idx=`expr index $i =`
      if [ $1 == ${i:0:mac_idx-1} ]
      then
        public_mac=${i:mac_idx}
      fi
    done
}

define_vm()
{
    vm_image=/var/vmpool/$vm_name.img

    mac_get $vm_id

    if [ ! -e $vm_image ]
    then
        qemu-img create -f raw $vm_image 40G
    fi

    cat << __EOT__ > $vm_name.xml
<domain type='kvm'>
  <name>$vm_name</name>
  <memory unit='KiB'>$vm_memory</memory>
  <cpu mode='custom' match='exact'>
    <model fallback='allow'>SandyBridge</model>
    <vendor>Intel</vendor>
    <feature policy='require' name='vmx'/>
  </cpu>
  <currentMemory unit='KiB'>$vm_memory</currentMemory>
  <vcpu placement='static'>$vm_cpu</vcpu>
  <os>
    <type arch='x86_64'>hvm</type>
    <boot dev='network'/>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none'/>
      <source file='$vm_image'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <interface type='bridge'>
      <mac address='$mgmt_mac'/>
      <source bridge='br-mgmt'/>
      <model type='virtio'/>
    </interface>
    <interface type='bridge'>
      <mac address='$public_mac'/>
      <source bridge='br-public'/>
      <model type='virtio'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
    </video>
    <memballoon model='virtio'>
    </memballoon>
  </devices>
</domain>
__EOT__

}

add_vm()
{
    mac_get vm$1

    cobbler system add --name vm$1 --hostname vm$1 --profile $2
    cobbler system edit --name vm$1 --interface eth0 --ip-address 10.1.1.$1 --mac $mgmt_mac --management True
    cobbler system edit --name vm$1 --interface eth1 --ip-address 10.84.23.$1 --mac $public_mac --netmask 255.255.255.0 --static True --static-routes "0.0.0.0/0:10.84.23.254"
    cobbler system edit --name vm$1 --gateway 10.84.23.254
}

if [[ $1 == "define" ]]
then
    vm_id=$2
    vm_name=$2-$3
    vm_cpu=$4
    let "vm_memory = $5 * 1024 * 1024"
    define_vm
elif [[ $1 == "add" ]]
then
    #for vm_id in "96 97 98 99 100 101 102 103"
    for vm_idx in "96"
    do
        add_vm $vm_idx centos-7.0-1406-x86_64
    done

    #for vm_idx in "104 105 106 107 108 109 110 111"
    for vm_idx in "104"
    do
        add_vm $vm_idx ubuntu-14.04.2-x86_64
    done
elif [[ $1 == "delete" ]]
then
    cobbler system remove --name $2
elif [[ $1 == "reimage" ]]
then
    cobbler system edit --name $2 --netboot True
else
    echo "Usage:"
    echo "$0 define <id> <name> <CPU> <memory>(GB)"
    echo "eg. $0 define vm96 centos 2 16"
    echo "$0 add <id>"
    echo "$0 delete <id>"
    echo "$0 reimage <id>"
    echo ""
fi

